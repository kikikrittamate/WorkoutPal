package com.example.workoutpal.customui.theme

import androidx.compose.ui.graphics.Color

val primaryLight = Color(0xFFFF8A80) // Light Red
val onPrimaryLight = Color(0xFF000000) // Black
val primaryContainerLight = Color(0xFFFFEBEE) // Light Red Tint
val onPrimaryContainerLight = Color(0xFF000000) // Black
val secondaryLight = Color(0xFFFF8A80) // Light Red
val onSecondaryLight = Color(0xFF000000) // Black
val secondaryContainerLight = Color(0xFFFFEBEE) // Light Red Tint
val onSecondaryContainerLight = Color(0xFF000000) // Black
val tertiaryLight = Color(0xFFFF8A80) // Light Red
val onTertiaryLight = Color(0xFF000000) // Black
val tertiaryContainerLight = Color(0xFFFFEBEE) // Light Red Tint
val onTertiaryContainerLight = Color(0xFF000000) // Black
val errorLight = Color(0xFFFF8A80) // Light Red
val onErrorLight = Color(0xFF000000) // Black
val errorContainerLight = Color(0xFFFFEBEE) // Light Red Tint
val onErrorContainerLight = Color(0xFF000000) // Black
val backgroundLight = Color(0xFF212121) // Dark Gray
val onBackgroundLight = Color(0xFFFFFFFF) // White
val surfaceLight = Color(0xFF424242) // Medium Gray
val onSurfaceLight = Color(0xFFFFFFFF) // White
val surfaceVariantLight = Color(0xFF616161) // Dark Gray
val onSurfaceVariantLight = Color(0xFFFFFFFF) // White
val outlineLight = Color(0xFF616161) // Dark Gray
val outlineVariantLight = Color(0xFF616161) // Dark Gray
val scrimLight = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceLight = Color(0xFFFFFFFF) // White
val inverseOnSurfaceLight = Color(0xFF000000) // Black
val inversePrimaryLight = Color(0xFFFF8A80) // Light Red
val surfaceDimLight = Color(0xFF616161) // Dark Gray
val surfaceBrightLight = Color(0xFFFFFFFF) // White
val surfaceContainerLowestLight = Color(0xFFFFFFFF) // White
val surfaceContainerLowLight = Color(0xFFFFFFFF) // White
val surfaceContainerLight = Color(0xFFFFFFFF) // White
val surfaceContainerHighLight = Color(0xFFFFFFFF) // White
val surfaceContainerHighestLight = Color(0xFFFFFFFF) // White

val primaryLightMediumContrast = Color(0xFFFF8A80) // Light Red
val onPrimaryLightMediumContrast = Color(0xFF000000) // Black
val primaryContainerLightMediumContrast = Color(0xFFFFEBEE) // Light Red Tint
val onPrimaryContainerLightMediumContrast = Color(0xFF000000) // Black
val secondaryLightMediumContrast = Color(0xFFFF8A80) // Light Red
val onSecondaryLightMediumContrast = Color(0xFF000000) // Black
val secondaryContainerLightMediumContrast = Color(0xFFB71C1C) // Dark Red
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF) // White
val tertiaryLightMediumContrast = Color(0xFFFF8A80) // Light Red
val onTertiaryLightMediumContrast = Color(0xFF000000) // Black
val tertiaryContainerLightMediumContrast = Color(0xFFB71C1C) // Dark Red
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF) // White
val errorLightMediumContrast = Color(0xFFFF8A80) // Light Red
val onErrorLightMediumContrast = Color(0xFF000000) // Black
val errorContainerLightMediumContrast = Color(0xFFFFEBEE) // Light Red Tint
val onErrorContainerLightMediumContrast = Color(0xFF000000) // Black
val backgroundLightMediumContrast = Color(0xFF212121) // Dark Gray
val onBackgroundLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceLightMediumContrast = Color(0xFF424242) // Medium Gray
val onSurfaceLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceVariantLightMediumContrast = Color(0xFF616161) // Dark Gray
val onSurfaceVariantLightMediumContrast = Color(0xFFFFFFFF) // White
val outlineLightMediumContrast = Color(0xFF616161) // Dark Gray
val outlineVariantLightMediumContrast = Color(0xFF616161) // Dark Gray
val scrimLightMediumContrast = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceLightMediumContrast = Color(0xFFFFFFFF) // White
val inverseOnSurfaceLightMediumContrast = Color(0xFF000000) // Black
val inversePrimaryLightMediumContrast = Color(0xFFFF8A80) // Light Red
val surfaceDimLightMediumContrast = Color(0xFF616161) // Dark Gray
val surfaceBrightLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighLightMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighestLightMediumContrast = Color(0xFFFFFFFF) // White

val primaryLightHighContrast = Color(0xFFFF8A80) // Light Red
val onPrimaryLightHighContrast = Color(0xFF000000) // Black
val primaryContainerLightHighContrast = Color(0xFFFFEBEE) // Light Red Tint
val onPrimaryContainerLightHighContrast = Color(0xFF000000) // Black
val secondaryLightHighContrast = Color(0xFFFF8A80) // Light Red
val onSecondaryLightHighContrast = Color(0xFF000000) // Black
val secondaryContainerLightHighContrast = Color(0xFFB71C1C) // Dark Red
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF) // White
val tertiaryLightHighContrast = Color(0xFFFF8A80) // Light Red
val onTertiaryLightHighContrast = Color(0xFF000000) // Black
val tertiaryContainerLightHighContrast = Color(0xFFB71C1C) // Dark Red
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF) // White
val errorLightHighContrast = Color(0xFFFF8A80) // Light Red
val onErrorLightHighContrast = Color(0xFF000000) // Black
val errorContainerLightHighContrast = Color(0xFFFFEBEE) // Light Red Tint
val onErrorContainerLightHighContrast = Color(0xFF000000) // Black
val backgroundLightHighContrast = Color(0xFF212121) // Dark Gray
val onBackgroundLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceLightHighContrast = Color(0xFF424242) // Medium Gray
val onSurfaceLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceVariantLightHighContrast = Color(0xFF616161) // Dark Gray
val onSurfaceVariantLightHighContrast = Color(0xFFFFFFFF) // White
val outlineLightHighContrast = Color(0xFF616161) // Dark Gray
val outlineVariantLightHighContrast = Color(0xFF616161) // Dark Gray
val scrimLightHighContrast = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceLightHighContrast = Color(0xFFFFFFFF) // White
val inverseOnSurfaceLightHighContrast = Color(0xFF000000) // Black
val inversePrimaryLightHighContrast = Color(0xFFFF8A80) // Light Red
val surfaceDimLightHighContrast = Color(0xFF616161) // Dark Gray
val surfaceBrightLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighLightHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighestLightHighContrast = Color(0xFFFFFFFF) // White

val primaryDark = Color(0xFFD32F2F) // Dark Red
val onPrimaryDark = Color(0xFFFFFFFF) // White
val primaryContainerDark = Color(0xFF9A0007) // Dark Red Shade
val onPrimaryContainerDark = Color(0xFFFFFFFF) // White
val secondaryDark = Color(0xFFD32F2F) // Dark Red
val onSecondaryDark = Color(0xFFFFFFFF) // White
val secondaryContainerDark = Color(0xFF9A0007) // Dark Red Shade
val onSecondaryContainerDark = Color(0xFFFFFFFF) // White
val tertiaryDark = Color(0xFFD32F2F) // Dark Red
val onTertiaryDark = Color(0xFFFFFFFF) // White
val tertiaryContainerDark = Color(0xFF9A0007) // Dark Red Shade
val onTertiaryContainerDark = Color(0xFFFFFFFF) // White
val errorDark = Color(0xFFD32F2F) // Dark Red
val onErrorDark = Color(0xFFFFFFFF) // White
val errorContainerDark = Color(0xFF9A0007) // Dark Red Shade
val onErrorContainerDark = Color(0xFFFFFFFF) // White
val backgroundDark = Color(0xFF212121) // Dark Gray
val onBackgroundDark = Color(0xFFFFFFFF) // White
val surfaceDark = Color(0xFF424242) // Medium Gray
val onSurfaceDark = Color(0xFFFFFFFF) // White
val surfaceVariantDark = Color(0xFF616161) // Dark Gray
val onSurfaceVariantDark = Color(0xFFFFFFFF) // White
val outlineDark = Color(0xFF616161) // Dark Gray
val outlineVariantDark = Color(0xFF616161) // Dark Gray
val scrimDark = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceDark = Color(0xFFFFFFFF) // White
val inverseOnSurfaceDark = Color(0xFF000000) // Black
val inversePrimaryDark = Color(0xFFD32F2F) // Dark Red
val surfaceDimDark = Color(0xFF616161) // Dark Gray
val surfaceBrightDark = Color(0xFFFFFFFF) // White
val surfaceContainerLowestDark = Color(0xFFFFFFFF) // White
val surfaceContainerLowDark = Color(0xFFFFFFFF) // White
val surfaceContainerDark = Color(0xFFFFFFFF) // White
val surfaceContainerHighDark = Color(0xFFFFFFFF) // White
val surfaceContainerHighestDark = Color(0xFFFFFFFF) // White

val primaryDarkMediumContrast = Color(0xFFD32F2F) // Dark Red
val onPrimaryDarkMediumContrast = Color(0xFFFFFFFF) // White
val primaryContainerDarkMediumContrast = Color(0xFF9A0007) // Dark Red Shade
val onPrimaryContainerDarkMediumContrast = Color(0xFFFFFFFF) // White
val secondaryDarkMediumContrast = Color(0xFFD32F2F) // Dark Red
val onSecondaryDarkMediumContrast = Color(0xFFFFFFFF) // White
val secondaryContainerDarkMediumContrast = Color(0xFFB71C1C) // Dark Red
val onSecondaryContainerDarkMediumContrast = Color(0xFFFFFFFF) // White
val tertiaryDarkMediumContrast = Color(0xFFD32F2F) // Dark Red
val onTertiaryDarkMediumContrast = Color(0xFFFFFFFF) // White
val tertiaryContainerDarkMediumContrast = Color(0xFFB71C1C) // Dark Red
val onTertiaryContainerDarkMediumContrast = Color(0xFFFFFFFF) // White
val errorDarkMediumContrast = Color(0xFFD32F2F) // Dark Red
val onErrorDarkMediumContrast = Color(0xFFFFFFFF) // White
val errorContainerDarkMediumContrast = Color(0xFF9A0007) // Dark Red Shade
val onErrorContainerDarkMediumContrast = Color(0xFFFFFFFF) // White
val backgroundDarkMediumContrast = Color(0xFF212121) // Dark Gray
val onBackgroundDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceDarkMediumContrast = Color(0xFF424242) // Medium Gray
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceVariantDarkMediumContrast = Color(0xFF616161) // Dark Gray
val onSurfaceVariantDarkMediumContrast = Color(0xFFFFFFFF) // White
val outlineDarkMediumContrast = Color(0xFF616161) // Dark Gray
val outlineVariantDarkMediumContrast = Color(0xFF616161) // Dark Gray
val scrimDarkMediumContrast = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceDarkMediumContrast = Color(0xFFFFFFFF) // White
val inverseOnSurfaceDarkMediumContrast = Color(0xFF000000) // Black
val inversePrimaryDarkMediumContrast = Color(0xFFD32F2F) // Dark Red
val surfaceDimDarkMediumContrast = Color(0xFF616161) // Dark Gray
val surfaceBrightDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowestDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighDarkMediumContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighestDarkMediumContrast = Color(0xFFFFFFFF) // White

val primaryDarkHighContrast = Color(0xFFD32F2F) // Dark Red
val onPrimaryDarkHighContrast = Color(0xFFFFFFFF) // White
val primaryContainerDarkHighContrast = Color(0xFF9A0007) // Dark Red Shade
val onPrimaryContainerDarkHighContrast = Color(0xFFFFFFFF) // White
val secondaryDarkHighContrast = Color(0xFFD32F2F) // Dark Red
val onSecondaryDarkHighContrast = Color(0xFFFFFFFF) // White
val secondaryContainerDarkHighContrast = Color(0xFFB71C1C) // Dark Red
val onSecondaryContainerDarkHighContrast = Color(0xFFFFFFFF) // White
val tertiaryDarkHighContrast = Color(0xFFD32F2F) // Dark Red
val onTertiaryDarkHighContrast = Color(0xFFFFFFFF) // White
val tertiaryContainerDarkHighContrast = Color(0xFFB71C1C) // Dark Red
val onTertiaryContainerDarkHighContrast = Color(0xFFFFFFFF) // White
val errorDarkHighContrast = Color(0xFFD32F2F) // Dark Red
val onErrorDarkHighContrast = Color(0xFFFFFFFF) // White
val errorContainerDarkHighContrast = Color(0xFF9A0007) // Dark Red Shade
val onErrorContainerDarkHighContrast = Color(0xFFFFFFFF) // White
val backgroundDarkHighContrast = Color(0xFF212121) // Dark Gray
val onBackgroundDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceDarkHighContrast = Color(0xFF424242) // Medium Gray
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceVariantDarkHighContrast = Color(0xFF616161) // Dark Gray
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF) // White
val outlineDarkHighContrast = Color(0xFF616161) // Dark Gray
val outlineVariantDarkHighContrast = Color(0xFF616161) // Dark Gray
val scrimDarkHighContrast = Color(0x99000000) // Semi-transparent Black
val inverseSurfaceDarkHighContrast = Color(0xFFFFFFFF) // White
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000) // Black
val inversePrimaryDarkHighContrast = Color(0xFFD32F2F) // Dark Red
val surfaceDimDarkHighContrast = Color(0xFF616161) // Dark Gray
val surfaceBrightDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowestDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerLowDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighDarkHighContrast = Color(0xFFFFFFFF) // White
val surfaceContainerHighestDarkHighContrast = Color(0xFFFFFFFF) // White